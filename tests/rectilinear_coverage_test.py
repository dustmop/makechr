import unittest

import context
from makechr import outline_tracer, rectilinear_coverage
from PIL import Image


class ImageClassifier(object):
  def __init__(self, img):
    self.img = img
    self.pixels = self.img.load()

  def is_clear(self, y, x):
    p = self.pixels[x,y]
    return p[0] == p[1] == p[2]


class RectilinearCoverageTests(unittest.TestCase):
  def test_rectilinear_coverage(self):
    img = Image.open('testdata/geometric-outlines.png')
    classifier = ImageClassifier(img)
    width, height = img.size
    tracer = outline_tracer.OutlineTracer(height, width, classifier.is_clear)
    regions = tracer.find_regions()
    coverage = rectilinear_coverage.RectilinearCoverage()
    coverage.calc(regions)
    actual = []
    for g in regions:
      for r in g.rects:
        actual.append([r.top, r.left, r.bot, r.right])
    expect = [[8, 16, 16, 24], [16, 40, 24, 48], [40, 32, 48, 40], [32, 8, 40, 16], [16, 16, 40, 40], [8, 60, 24, 68], [8, 72, 24, 80], [21, 62, 29, 78], [8, 93, 21, 104], [8, 108, 21, 119], [24, 96, 32, 116], [21, 96, 29, 104], [21, 108, 29, 116], [8, 128, 21, 139], [8, 143, 32, 151], [24, 131, 32, 143], [21, 131, 29, 139], [11, 160, 19, 170], [11, 174, 19, 184], [24, 168, 32, 176], [19, 174, 27, 182], [19, 162, 27, 170], [11, 192, 19, 202], [11, 206, 27, 214], [24, 200, 32, 208], [19, 194, 27, 202], [56, 16, 64, 24], [56, 32, 64, 40], [64, 40, 72, 48], [80, 40, 88, 48], [88, 32, 96, 40], [88, 16, 96, 24], [80, 8, 88, 16], [64, 8, 72, 16], [64, 16, 88, 40], [56, 56, 64, 96], [56, 56, 64, 96], [72, 56, 80, 96], [72, 56, 80, 96], [64, 64, 72, 88], [56, 109, 69, 120], [56, 124, 96, 132], [72, 112, 96, 124], [69, 112, 77, 120], [59, 148, 67, 158], [59, 162, 67, 172], [88, 156, 96, 164], [72, 150, 91, 170], [67, 150, 75, 158], [67, 162, 75, 170], [62, 184, 78, 192], [64, 199, 88, 207], [80, 187, 88, 199], [76, 187, 84, 195], [112, 22, 120, 30], [120, 12, 128, 20], [116, 8, 124, 16], [114, 14, 122, 22], [112, 40, 120, 48], [113, 51, 121, 59], [128, 41, 136, 57], [128, 41, 136, 57], [120, 44, 128, 52], [112, 72, 120, 80], [112, 82, 120, 90], [122, 82, 130, 90], [122, 72, 130, 80], [117, 77, 125, 85], [112, 112, 120, 120], [134, 117, 142, 125], [132, 96, 140, 104], [116, 104, 124, 112], [124, 107, 132, 123], [132, 115, 140, 123], [128, 100, 136, 108], [114, 144, 122, 152], [134, 149, 142, 157], [132, 128, 140, 136], [118, 136, 126, 144], [124, 139, 132, 155], [132, 147, 140, 155], [128, 132, 136, 140], [114, 160, 130, 168], [116, 175, 140, 183], [132, 163, 140, 175], [130, 163, 138, 171], [114, 192, 130, 200], [116, 207, 140, 215], [128, 195, 136, 203], [132, 203, 140, 211], [152, 24, 160, 32], [158, 18, 166, 26], [156, 12, 164, 20], [154, 16, 162, 24], [152, 48, 160, 56], [165, 55, 173, 63], [167, 48, 175, 56], [165, 41, 173, 49], [159, 52, 167, 60], [159, 44, 167, 52], [152, 80, 160, 88], [166, 77, 174, 93], [166, 77, 174, 93], [158, 78, 166, 86], [153, 101, 161, 109], [167, 102, 175, 118], [167, 102, 175, 118], [161, 103, 169, 111], [154, 136, 162, 144], [161, 135, 177, 143], [156, 128, 164, 136], [154, 160, 162, 168], [159, 166, 167, 174], [166, 165, 182, 173], [162, 157, 170, 165], [184, 16, 192, 24], [198, 13, 206, 21], [197, 20, 205, 28], [190, 14, 198, 22], [184, 36, 192, 44], [198, 41, 206, 49], [197, 33, 205, 41], [190, 34, 198, 42], [184, 56, 192, 64], [196, 60, 204, 68], [197, 55, 205, 63], [190, 54, 198, 62], [184, 78, 192, 86], [198, 82, 206, 90], [190, 76, 198, 84], [197, 77, 205, 85], [184, 96, 192, 104], [184, 106, 192, 114], [196, 109, 204, 117], [196, 99, 204, 107], [190, 102, 198, 110]]
    self.assertEqual(actual, expect)


if __name__ == '__main__':
  unittest.main()
